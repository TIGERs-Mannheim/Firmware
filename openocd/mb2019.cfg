source openocd/mem_helper.tcl

telnet_port 4444
gdb_port 3333

adapter driver ftdi
ftdi device_desc "Powerboard v1"
ftdi vid_pid 0x0403 0x6010

# PINs
# ADBUS0 - SWCLK (PD)
# ADBUS1 - SWDO (PU)
# ADBUS2 - SWDI
# ADBUS3 - SWDO_EN (PU)
# ADBUS4 - nSRST (PU)

ftdi channel 0
ftdi layout_init 0x0102 0x010B
ftdi layout_signal SWD_EN -data 0
ftdi layout_signal SWDIO_OE -ndata 0x0008
ftdi layout_signal nSRST -data 0x0010 -oe 0x0010

transport select swd

set _CPUTAPID 0x6BA02477
set _WORKAREASIZE 0x10000
set _ENDIAN little

set _MAIN main

swd newdap $_MAIN cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGET_MAIN $_MAIN.cpu
set _DAP_MAIN $_MAIN.dap
set _FLASH_MAIN $_MAIN.flash
set _FLASH_MAIN1 $_MAIN.flash1

dap create $_DAP_MAIN -chain-position $_TARGET_MAIN

target create $_MAIN.ap2 mem_ap -dap $_MAIN.dap -ap-num 2
swo  create $_MAIN.swo  -dap $_MAIN.dap -ap-num 2 -baseaddr 0xE00E3000
tpiu create $_MAIN.tpiu -dap $_MAIN.dap -ap-num 2 -baseaddr 0xE00F5000

target create $_TARGET_MAIN cortex_m -endian $_ENDIAN -dap $_DAP_MAIN -ap-num 0

# $_TARGET_MAIN configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
$_TARGET_MAIN configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0 -rtos auto

flash bank $_FLASH_MAIN stm32h7x 0x08000000 0 0 0 $_TARGET_MAIN
flash bank $_FLASH_MAIN1 stm32h7x 0x08100000 0 0 0 $_TARGET_MAIN

adapter speed 1800
adapter srst delay 100
adapter srst pulse_width 10

reset_config srst_nogate

cortex_m reset_config sysresetreq

$_DAP_MAIN apcsw 0x08000000 0x08000000

$_TARGET_MAIN configure -event examine-end {
	# Enable D3 and D1 DBG clocks
	# DBGMCU_CR |= D3DBGCKEN | D1DBGCKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00600000 0

	# Enable debug during low power modes (uses more power)
	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP D1 Domain
	stm32h7x_dbgmcu_mmw 0x004 0x00000007 0
	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP D2 Domain
	stm32h7x_dbgmcu_mmw 0x004 0x00000038 0

	# Stop watchdog counters during halt
	# DBGMCU_APB3FZ1 |= WWDG1
	stm32h7x_dbgmcu_mmw 0x034 0x00000040 0
	# DBGMCU_APB1LFZ1 |= WWDG2
	stm32h7x_dbgmcu_mmw 0x03C 0x00000800 0
	# DBGMCU_APB4FZ1 |= WDGLSD1 | WDGLSD2
	stm32h7x_dbgmcu_mmw 0x054 0x000C0000 0

	# Enable clock for tracing
	# DBGMCU_CR |= TRACECLKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00100000 0

	# RM0399 (id 0x450) M7+M4 with SWO Funnel
	# RM0433 (id 0x450) M7 with SWO Funnel
	# RM0455 (id 0x480) M7 without SWO Funnel
	# RM0468 (id 0x483) M7 without SWO Funnel
	# Enable CM7 and CM4 slave ports in SWO trace Funnel
	# Works ok also on devices single core and without SWO funnel
	# Hack, use stm32h7x_dbgmcu_mmw with big offset to control SWTF
	# SWTF_CTRL |= ENS0 | ENS1
	stm32h7x_dbgmcu_mmw 0x3000 0x00000003 0
}

$_TARGET_MAIN configure -event reset-init {
	# Clock after reset is HSI at 64 MHz, no need of PLL
	adapter speed 4000
}

# like mrw, but with target selection
proc stm32h7x_mrw {used_target reg} {
	return [$used_target read_memory $reg 32 1]
}

# like mmw, but with target selection
proc stm32h7x_mmw {used_target reg setbits clearbits} {
	set old [stm32h7x_mrw $used_target $reg]
	set new [expr {($old & ~$clearbits) | $setbits}]
	$used_target mww $reg $new
}

# mmw for dbgmcu component registers, it accepts the register offset from dbgmcu base
# this procedure will use the mem_ap on AP2 whenever possible
proc stm32h7x_dbgmcu_mmw {reg_offset setbits clearbits} {
	# use $_MAIN.ap2 if possible, and use the proper dbgmcu base address
	set used_target main.ap2
	set reg_addr [expr {0xE00E1000 + $reg_offset}]

	stm32h7x_mmw $used_target $reg_addr $setbits $clearbits
}

init
