source openocd/mem_helper.tcl

telnet_port 4444
gdb_port 3333

adapter driver ftdi
ftdi_device_desc "BS v3b"
ftdi_vid_pid 0x0403 0x6010

# PINs
# ADBUS0 - SWCLK (PD)
# ADBUS1 - SWDO (PU)
# ADBUS2 - SWDI
# ADBUS3 - SWDO_EN (PU)
# ...
# ACBUS0 - nSRST (PU)

ftdi_channel 0
ftdi_layout_init 0x0102 0x010B
ftdi_layout_signal SWD_EN -data 0
ftdi_layout_signal SWDIO_OE -ndata 0x0008
ftdi_layout_signal nSRST -data 0x0100 -oe 0x0100

transport select swd

set _CHIPNAME stm32f7x
set _CPUTAPID 0x5BA02477
set _BSTAPID 0x06451041
set _WORKAREASIZE 0x10000
set _ENDIAN little

set _MAIN main

swd newdap $_MAIN cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGET_MAIN $_MAIN.cpu
set _DAP_MAIN $_MAIN.dap
set _FLASH_MAIN $_MAIN.flash

dap create $_DAP_MAIN -chain-position $_TARGET_MAIN

target create $_TARGET_MAIN cortex_m -endian $_ENDIAN -dap $_DAP_MAIN

$_TARGET_MAIN configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0 -rtos auto

$_TARGET_MAIN configure -event examine-end {
	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
	mmw 0xE0042004 0x00000007 0

	# Stop watchdog counters during halt
	# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
	mmw 0xE0042008 0x00001800 0
}

$_TARGET_MAIN configure -event trace-config {
	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0042004 0x00000020 0
}

$_TARGET_MAIN configure -event reset-init {
	# If the HSE was previously enabled and the external clock source
	# disappeared, RCC_CR.HSERDY can get stuck at 1 and the PLL cannot be
	# properly switched back to HSI. This situation persists even over a system
	# reset, including a pin reset via SRST. However, activating the clock
	# security system will detect the problem and clear HSERDY to 0, which in
	# turn allows the PLL to switch back to HSI properly. Since we just came
	# out of reset, HSEON should be 0. If HSERDY is 1, then this situation must
	# have happened; in that case, activate the clock security system to clear
	# HSERDY.
	if {[mrw 0x40023800] & 0x00020000} {
		mmw 0x40023800 0x00090000 0 ;# RCC_CR = CSSON | HSEON
		sleep 10                    ;# Wait for CSS to fire, if it wants to
		mmw 0x40023800 0 0x00090000 ;# RCC_CR &= ~CSSON & ~HSEON
		mww 0x4002380C 0x00800000   ;# RCC_CIR = CSSC
		sleep 1                     ;# Wait for CSSF to clear
	}

	# If the clock security system fired, it will pend an NMI. A pending NMI
	# will cause a bad time for any subsequent executing code, such as a
	# programming algorithm.
	if {[mrw 0xE000ED04] & 0x80000000} {
		# ICSR.NMIPENDSET reads as 1. Need to clear it. A pending NMI canâ€™t be
		# cleared by any normal means (such as ICSR or NVIC). It can only be
		# cleared by entering the NMI handler or by resetting the processor.
		echo "[target current]: Clock security system generated NMI. Clearing."

		# Keep the old DEMCR value.
		set old [mrw 0xE000EDFC]

		# Enable vector catch on reset.
		mww 0xE000EDFC 0x01000001

		# Issue local reset via AIRCR.
		mww 0xE000ED0C 0x05FA0001

		# Restore old DEMCR value.
		mww 0xE000EDFC $old
	}

	# Configure PLL to boost clock to HSI x 10 (160 MHz)
	mww 0x40023804 0x08002808   ;# RCC_PLLCFGR 16 Mhz /10 (M) * 128 (N) /2(P)
	mww 0x40023C00 0x00000107   ;# FLASH_ACR = PRFTBE | 7(Latency)
	mmw 0x40023800 0x01000000 0 ;# RCC_CR |= PLLON
	sleep 10                    ;# Wait for PLL to lock
	mww 0x40023808 0x00009400   ;# RCC_CFGR_PPRE1 = 5(div 4), PPRE2 = 4(div 2)
	mmw 0x40023808 0x00000002 0 ;# RCC_CFGR |= RCC_CFGR_SW_PLL

	# Boost SWD frequency
	# Do not boost JTAG frequency and slow down JTAG memory access or flash write algo
	# suffers from DAP WAITs
	adapter speed 8000
}

$_TARGET_MAIN configure -event reset-start {
	# Reduce speed since CPU speed will slow down to 16MHz with the reset
	adapter speed 2000
}

flash bank $_FLASH_MAIN stm32f2x 0 0 0 0 $_TARGET_MAIN
flash bank $_CHIPNAME.otp stm32f2x 0x1ff0f000 0 0 0 $_TARGET_MAIN

adapter speed 2000
adapter srst delay 100
adapter srst pulse_width 10

reset_config srst_only srst_nogate

init

# cortex_m reset_config sysresetreq

$_DAP_MAIN apcsw 0x08000000 0x08000000

