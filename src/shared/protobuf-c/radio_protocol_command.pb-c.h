/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: radio_protocol_command.proto */

#ifndef PROTOBUF_C_radio_5fprotocol_5fcommand_2eproto__INCLUDED
#define PROTOBUF_C_radio_5fprotocol_5fcommand_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _RadioProtocolCommand RadioProtocolCommand;


/* --- enums --- */


/* --- messages --- */

struct  _RadioProtocolCommand
{
  ProtobufCMessage base;
  int32_t robot_id;
  float velocity_x;
  float velocity_y;
  float velocity_r;
  protobuf_c_boolean has_flat_kick;
  float flat_kick;
  protobuf_c_boolean has_chip_kick;
  float chip_kick;
  protobuf_c_boolean has_dribbler_spin;
  float dribbler_spin;
};
#define RADIO_PROTOCOL_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&radio_protocol_command__descriptor) \
    , 0, 0, 0, 0, 0,0, 0,0, 0,0 }


/* RadioProtocolCommand methods */
void   radio_protocol_command__init
                     (RadioProtocolCommand         *message);
size_t radio_protocol_command__get_packed_size
                     (const RadioProtocolCommand   *message);
size_t radio_protocol_command__pack
                     (const RadioProtocolCommand   *message,
                      uint8_t             *out);
size_t radio_protocol_command__pack_to_buffer
                     (const RadioProtocolCommand   *message,
                      ProtobufCBuffer     *buffer);
RadioProtocolCommand *
       radio_protocol_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   radio_protocol_command__free_unpacked
                     (RadioProtocolCommand *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RadioProtocolCommand_Closure)
                 (const RadioProtocolCommand *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor radio_protocol_command__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_radio_5fprotocol_5fcommand_2eproto__INCLUDED */
