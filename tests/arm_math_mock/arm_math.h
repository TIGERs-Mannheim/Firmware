#pragma once

#include "math.h"
#include "stdint.h"

#ifndef PI
  #define PI               3.14159265358979f
#endif

/**
 * @brief 8-bit fractional data type in 1.7 format.
 */
typedef int8_t q7_t;

/**
 * @brief 16-bit fractional data type in 1.15 format.
 */
typedef int16_t q15_t;

/**
 * @brief 32-bit fractional data type in 1.31 format.
 */
typedef int32_t q31_t;

/**
 * @brief 64-bit fractional data type in 1.63 format.
 */
typedef int64_t q63_t;

/**
 * @brief 32-bit floating-point type definition.
 */
typedef float float32_t;

/**
 * @brief 64-bit floating-point type definition.
 */
typedef double float64_t;


/**
 * @brief Instance structure for the floating-point matrix structure.
 */
typedef struct
{
	uint16_t numRows;     /**< number of rows of the matrix.     */
	uint16_t numCols;     /**< number of columns of the matrix.  */
	float32_t *pData;     /**< points to the data of the matrix. */
} arm_matrix_instance_f32;


/**
 * @brief Instance structure for the floating-point matrix structure.
 */
typedef struct
{
	uint16_t numRows;     /**< number of rows of the matrix.     */
	uint16_t numCols;     /**< number of columns of the matrix.  */
	float64_t *pData;     /**< points to the data of the matrix. */
} arm_matrix_instance_f64;

/**
 * @brief Instance structure for the Q15 matrix structure.
 */
typedef struct
{
	uint16_t numRows;     /**< number of rows of the matrix.     */
	uint16_t numCols;     /**< number of columns of the matrix.  */
	q15_t *pData;         /**< points to the data of the matrix. */
} arm_matrix_instance_q15;

/**
 * @brief Instance structure for the Q31 matrix structure.
 */
typedef struct
{
	uint16_t numRows;     /**< number of rows of the matrix.     */
	uint16_t numCols;     /**< number of columns of the matrix.  */
	q31_t *pData;         /**< points to the data of the matrix. */
} arm_matrix_instance_q31;


/**
 * @brief Error status returned by some functions in the library.
 */

typedef enum
{
	ARM_MATH_SUCCESS = 0,                /**< No error */
	ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
	ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
	ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation. */
	ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
	ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
	ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
} arm_status;


/**
 * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
 * @param[in] x  input value in radians.
 * @return  cos(x).
 */
float32_t arm_cos_f32(float32_t x);


/**
 * @brief  Fast approximation to the trigonometric sine function for floating-point data.
 * @param[in] x  input value in radians.
 * @return  sin(x).
 */
float32_t arm_sin_f32(float32_t x);
