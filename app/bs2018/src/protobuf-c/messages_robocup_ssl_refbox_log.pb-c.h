/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: messages_robocup_ssl_refbox_log.proto */

#ifndef PROTOBUF_C_messages_5frobocup_5fssl_5frefbox_5flog_2eproto__INCLUDED
#define PROTOBUF_C_messages_5frobocup_5fssl_5frefbox_5flog_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "messages_robocup_ssl_detection.pb-c.h"

typedef struct _LogFrame LogFrame;
typedef struct _RefboxLog RefboxLog;


/* --- enums --- */


/* --- messages --- */

struct  _LogFrame
{
  ProtobufCMessage base;
  SSLDetectionFrame *frame;
  char *refbox_cmd;
};
#define LOG__FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&log__frame__descriptor) \
    , NULL, NULL }


struct  _RefboxLog
{
  ProtobufCMessage base;
  size_t n_log;
  LogFrame **log;
};
#define REFBOX__LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refbox__log__descriptor) \
    , 0,NULL }


/* LogFrame methods */
void   log__frame__init
                     (LogFrame         *message);
size_t log__frame__get_packed_size
                     (const LogFrame   *message);
size_t log__frame__pack
                     (const LogFrame   *message,
                      uint8_t             *out);
size_t log__frame__pack_to_buffer
                     (const LogFrame   *message,
                      ProtobufCBuffer     *buffer);
LogFrame *
       log__frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   log__frame__free_unpacked
                     (LogFrame *message,
                      ProtobufCAllocator *allocator);
/* RefboxLog methods */
void   refbox__log__init
                     (RefboxLog         *message);
size_t refbox__log__get_packed_size
                     (const RefboxLog   *message);
size_t refbox__log__pack
                     (const RefboxLog   *message,
                      uint8_t             *out);
size_t refbox__log__pack_to_buffer
                     (const RefboxLog   *message,
                      ProtobufCBuffer     *buffer);
RefboxLog *
       refbox__log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refbox__log__free_unpacked
                     (RefboxLog *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LogFrame_Closure)
                 (const LogFrame *message,
                  void *closure_data);
typedef void (*RefboxLog_Closure)
                 (const RefboxLog *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor log__frame__descriptor;
extern const ProtobufCMessageDescriptor refbox__log__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_messages_5frobocup_5fssl_5frefbox_5flog_2eproto__INCLUDED */
